(root (block (defty (angll Ü) (atom red_panda_food) (anglr Ý) :: (tyMax (type (atom bamboo)) | (type (atom birds)) | (type (atom eggs)) | (type (atom berries))))) (block (defty (angll Ü) (atom squid_food) (anglr Ý) :: (tyMax (type (atom sperm_whale))))) (block (defty (angll Ü) (atom feed) (tyMax (type (var A))) (anglr Ý) :: (tyMax (type (fun_ fun) ( (tyFun ( ) (lra ->) (tyMax (type (var A)))) ))))) (block (def (spec (atom feeder) :: (tyFun ( (tyMaxs (tyMax (type (atom red_panda)))) ) (lra ->) (tyMax (type (subtype (angll Ü) (atom feed) (tyMax (type (subtype (angll Ü) (atom red_panda_food) (anglr Ý)))) (anglr Ý)))))) (func (atom feeder) (args ( (matchables (matchable (atom red_panda))) )) = (seqExprs (expr (expr125 (expr150 (expr160 (expr200 (expr300 (expr400 (expr500 (expr600 (exprMax (fun (fun_ fun) (funClause (args ( )) (lra ->) (seqExprs (lastOnly (atom bamboo)))) end))))))))))))))) (block (def (spec (atom feeder) :: (tyFun ( (tyMaxs (tyMax (type (atom squid)))) ) (lra ->) (tyMax (type (subtype (angll Ü) (atom feed) (tyMax (type (subtype (angll Ü) (atom squid_food) (anglr Ý)))) (anglr Ý)))))) (func (atom feeder) (args ( (matchables (matchable (atom squid))) )) = (seqExprs (expr (expr125 (expr150 (expr160 (expr200 (expr300 (expr400 (expr500 (expr600 (exprMax (fun (fun_ fun) (funClause (args ( )) (lra ->) (seqExprs (lastOnly (atom sperm_whale)))) end))))))))))))))) <EOF>)
