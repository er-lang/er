###---- BEGIN COPYRIGHT -------------------------------------------------------
###
### Copyright (C) 2007 - 2012, Rogvall Invest AB, <tony@rogvall.se>
###
### This software is licensed as described in the file COPYRIGHT, which
### you should have received as part of this distribution. The terms
### are also available at http://www.rogvall.se/docs/copyright.txt.
###
### You may opt to use, copy, modify, merge, publish, distribute and/or sell
### copies of the Software, and permit persons to whom the Software is
### furnished to do so, under the terms of the COPYRIGHT file.
###
### This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
### KIND, either express or implied.
###
###---- END COPYRIGHT ---------------------------------------------------------
### @author Tony Rogvall <tony@rogvall.se>
### @copyright (C) 2013, Tony Rogvall
### @doc
###    OpenCL 1.2 API
### @end
### Created : 13 Jan 2013 by Tony Rogvall <tony@rogvall.se>

-on_load(init/0).  # What's with all those attributes?

export
    start/0 start/1 stop/0
    get_platform_ids/0
    platform_info/0
    get_platform_info/1 get_platform_info/2
    get_device_ids/0 get_device_ids/2
    device_info/0
    get_device_info/1 get_device_info/2
    create_context/1
    create_context_from_type/1
    release_context/1
    retain_context/1
    context_info/0
    get_context_info/1 get_context_info/2
    create_queue/3
    set_queue_property/3
    release_queue/1
    retain_queue/1
    queue_info/0
    get_queue_info/1 get_queue_info/2
    create_buffer/3 create_buffer/4
    release_mem_object/1
    retain_mem_object/1
    mem_object_info/0
    get_mem_object_info/1 get_mem_object_info/2
    image_info/0
    get_image_info/1 get_image_info/2
    get_supported_image_formats/3
    create_image/5
    create_sampler/4
    release_sampler/1
    retain_sampler/1
    sampler_info/0
    get_sampler_info/1 get_sampler_info/2
    create_program_with_source/2
    create_program_with_binary/3
    release_program/1
    retain_program/1
    build_program/3 async_build_program/3
    unload_platform_compiler/1
    program_info/0
    get_program_info/1 get_program_info/2
    program_build_info/0
    get_program_build_info/2 get_program_build_info/3
    create_kernel/2
    create_kernels_in_program/1
    set_kernel_arg/3
    set_kernel_arg_size/3
    release_kernel/1
    retain_kernel/1
    kernel_info/0
    get_kernel_info/1 get_kernel_info/2
    kernel_workgroup_info/0
    get_kernel_workgroup_info/2 get_kernel_workgroup_info/3
    enqueue_task/3 enqueue_task/4
    nowait_enqueue_task/3
    enqueue_nd_range_kernel/5
    enqueue_nd_range_kernel/6
    nowait_enqueue_nd_range_kernel/5
    enqueue_marker_with_wait_list/2
    enqueue_barrier_with_wait_list/2
    enqueue_wait_for_events/2
    enqueue_read_buffer/5
    enqueue_write_buffer/6
    enqueue_write_buffer/7
    nowait_enqueue_write_buffer/6
    enqueue_read_image/7
    enqueue_write_image/8
    enqueue_write_image/9
    nowait_enqueue_write_image/8
    enqueue_copy_image/6
    enqueue_copy_image_to_buffer/7
    enqueue_copy_buffer_to_image/7
    enqueue_map_buffer/6
    enqueue_map_image/6
    enqueue_unmap_mem_object/3
    release_event/1
    retain_event/1
    event_info/0
    get_event_info/1 get_event_info/2
    wait/1 wait/2
    async_flush/1 flush/1
    async_finish/1 finish/1
    async_wait_for_event/1 wait_for_event/1
end

init () =
    if not lists:member({1,2}, cl:versions()) then
        erlang:error(cl_1_2_not_supported)
    else ok
    end.

start /1 = cl:start/1.
start /0 = cl:start/0.
stop () = cl:stop().
get_platform_ids /0 = cl:get_platform_ids/0.
platform_info    /0 = cl:    platform_info/0.
get_platform_info /1,2 = cl:get_platform_info/1,2.  # Note: wrapping from /1 to /2 or /2 to /1 won't be done.
get_device_ids    /0,2 = cl:get_device_ids/0,2.
device_info /0 =  # Note: /0 is special.
    cl:device_info_10(cl:device_info_11(cl:device_info_12([]))).
get_device_info /1,2 = cl:get_device_info/1,2.
create_context /1 = cl:create_context/1.
create_context_from_type (A1) = cl:create_context_from_type(A1).
release_context /1 = cl:release_context/1.
retain_context /1 = cl:retain_context/1.
context_info /0 = cl:context_info/0.
get_context_info /1,2 = cl:get_context_info/1,2.
create_queue /3 = cl:create_queue/3.
set_queue_property /3 = cl:set_queue_property/3.
release_queue /1 = cl:release_queue/1.
retain_queue /1 = cl:retain_queue/1.
queue_info /0 = cl:queue_info/0.
get_queue_info /1,2 = cl:get_queue_info/1,2.
create_buffer /3,4 = cl:create_buffer/3,4.
release_mem_object /1 = cl:release_mem_object/1.
retain_mem_object /1 = cl:retain_mem_object/1.
mem_object_info /0 = cl:mem_object_info/0.
get_mem_object_info /1,2 = cl:get_mem_object_info/1,2.
image_info /0 = cl:image_info/0.
get_image_info /1,2 = cl:get_image_info/1,2.
get_supported_image_formats /3 = cl:get_supported_image_formats/3.
create_image /5 = cl:create_image/5.
create_sampler /4 = cl:create_sampler/4.
release_sampler /1 = cl:release_sampler/1.
retain_sampler /1 = cl:retain_sampler/1.
sampler_info /0 = cl:sampler_info/0.
get_sampler_info /1,2 = cl:get_sampler_info/1.
create_program_with_source /2 = cl:create_program_with_source/2.
create_program_with_binary /3 = cl:create_program_with_binary/3.
release_program /1 = cl:release_program/1.
retain_program /1 = cl:retain_program/1.
build_program /3 = cl:build_program/3.
async_build_program(A1,A2,A3) -> cl:async_build_program(A1,A2,A3).
unload_platform_compiler(A1) -> cl:unload_platform_compiler(A1).
program_info() -> cl:program_info().
get_program_info(A1) -> cl:get_program_info(A1).
get_program_info(A1,A2) -> cl:get_program_info(A1,A2).
program_build_info() -> cl:program_build_info().
get_program_build_info(A1,A2) -> cl:get_program_build_info(A1,A2).
get_program_build_info(A1,A2,A3) -> cl:get_program_build_info(A1,A2,A3).
create_kernel(A1,A2) -> cl:create_kernel(A1,A2).
create_kernels_in_program(A1) -> cl:create_kernels_in_program(A1).
set_kernel_arg(A1,A2,A3) -> cl:set_kernel_arg(A1,A2,A3).
set_kernel_arg_size(A1,A2,A3) -> cl:set_kernel_arg_size(A1,A2,A3).
release_kernel(A1) -> cl:release_kernel(A1).
retain_kernel(A1) -> cl:retain_kernel(A1).
kernel_info() -> cl:kernel_info().
get_kernel_info(A1) -> cl:get_kernel_info(A1).
get_kernel_info(A1,A2) -> cl:get_kernel_info(A1,A2).
kernel_workgroup_info() -> cl:kernel_workgroup_info().
get_kernel_workgroup_info(A1,A2) -> cl:get_kernel_workgroup_info(A1,A2).
get_kernel_workgroup_info(A1,A2,A3) -> cl:get_kernel_workgroup_info(A1,A2,A3).
enqueue_task(A1,A2,A3) -> cl:enqueue_task(A1,A2,A3). 
enqueue_task(A1,A2,A3,A4) -> cl:enqueue_task(A1,A2,A3,A4).
nowait_enqueue_task(A1,A2,A3) -> cl:nowait_enqueue_task(A1,A2,A3).
enqueue_nd_range_kernel(A1,A2,A3,A4,A5) -> 
    cl:enqueue_nd_range_kernel(A1,A2,A3,A4,A5).
enqueue_nd_range_kernel(A1,A2,A3,A4,A5,A6) ->
    cl:enqueue_nd_range_kernel(A1,A2,A3,A4,A5,A6).
nowait_enqueue_nd_range_kernel(A1,A2,A3,A4,A5) ->
    cl:nowait_enqueue_nd_range_kernel(A1,A2,A3,A4,A5).
enqueue_marker_with_wait_list(A1,A2) -> 
    cl:enqueue_marker_with_wait_list(A1,A2).
enqueue_barrier_with_wait_list(A1,A2) ->
    cl:enqueue_barrier_with_wait_list(A1,A2).
enqueue_wait_for_events(A1,A2) -> 
    cl:enqueue_wait_for_events(A1,A2).
enqueue_read_buffer(A1,A2,A3,A4,A5) ->
    cl:enqueue_read_buffer(A1,A2,A3,A4,A5).
enqueue_write_buffer(A1,A2,A3,A4,A5,A6) ->
    cl:enqueue_write_buffer(A1,A2,A3,A4,A5,A6).
enqueue_write_buffer(A1,A2,A3,A4,A5,A6,A7) ->
    cl:enqueue_write_buffer(A1,A2,A3,A4,A5,A6,A7).
nowait_enqueue_write_buffer(A1,A2,A3,A4,A5,A6) ->
    cl:nowait_enqueue_write_buffer(A1,A2,A3,A4,A5,A6).
enqueue_read_image(A1,A2,A3,A4,A5,A6,A7) ->
    cl:enqueue_read_image(A1,A2,A3,A4,A5,A6,A7).
enqueue_write_image(A1,A2,A3,A4,A5,A6,A7,A8) ->
    cl:enqueue_write_image(A1,A2,A3,A4,A5,A6,A7,A8).
enqueue_write_image(A1,A2,A3,A4,A5,A6,A7,A8,A9) ->
    cl:enqueue_write_image(A1,A2,A3,A4,A5,A6,A7,A8,A9).
nowait_enqueue_write_image(A1,A2,A3,A4,A5,A6,A7,A8) ->
    cl:nowait_enqueue_write_image(A1,A2,A3,A4,A5,A6,A7,A8).
enqueue_copy_image(A1,A2,A3,A4,A5,A6) ->
    cl:enqueue_copy_image(A1,A2,A3,A4,A5,A6).
enqueue_copy_image_to_buffer(A1,A2,A3,A4,A5,A6,A7) ->
    cl:enqueue_copy_image_to_buffer(A1,A2,A3,A4,A5,A6,A7).
enqueue_copy_buffer_to_image(A1,A2,A3,A4,A5,A6,A7) ->
    cl:enqueue_copy_buffer_to_image(A1,A2,A3,A4,A5,A6,A7).
enqueue_map_buffer(A1,A2,A3,A4,A5,A6) ->
    cl:enqueue_map_buffer(A1,A2,A3,A4,A5,A6).
enqueue_map_image(A1,A2,A3,A4,A5,A6) ->
    cl:enqueue_map_image(A1,A2,A3,A4,A5,A6).
enqueue_unmap_mem_object(A1,A2,A3) ->
    cl:enqueue_unmap_mem_object(A1,A2,A3).
release_event(A1) -> cl:release_event(A1).
retain_event(A1) -> cl:retain_event(A1).
event_info() -> cl:event_info().
get_event_info(A1) -> cl:get_event_info(A1).
get_event_info(A1,A2) -> cl:get_event_info(A1,A2).
wait(A1) -> cl:wait(A1).
wait(A1,A2) -> cl:wait(A1,A2).
async_flush(A1) -> cl:async_flush(A1).
flush(A1) -> cl:flush(A1).
async_finish(A1) -> cl:async_finish(A1).
finish(A1) -> cl:finish(A1).
async_wait_for_event(A1) -> cl:async_wait_for_event(A1).
wait_for_event(A1) -> cl:wait_for_event(A1).
