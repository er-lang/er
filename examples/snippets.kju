
len (L) | is_list(L)  = length(L)
len (T) | is_tuple(T) = size(T)

f()= thiS() W=ill tot:ally(W + ork)
g()= i-ll(give) my:hand() to_cut

length ([])    = 0
length ([_|T]) = 1 + :(T)  #% ‘:’ references the currently defined function, here: ‘length’

f () =
    case orddict:find(Node, Nodes) of
        {ok, Ref} -> {down, node, Ref}
        {ok, WrongRef} | is_reference(WrongRef) -> 'not the one'
        error ->     {ignore, not_monitored, FD}
    end

'f' () =
    receive
#%       {'ok', Ref} -> 'do_somth'('arg1', 2) {'down', 'node', Ref}
        {'ok', WrongRef} when 'is_reference'(WrongRef) -> 'smth'() 'not the one'
        'error' ->     {'ignore', 'not_monitored', FD}
    end

t () =
    try Expr
    catch
        throw:Term -> Term
        exit:Reason -> {'EXIT',Reason}
        error:Reason -> {'EXIT',{Reason,erlang:get_stacktrace()}}
    end

i (Arg1) =
    if not Arg1 then false else false end

len (A) =
    case A of
        L when is_list(L) ->
            length(L)
        T | is_tuple(T) ->
            size(T)
    end

p (Str) =
    F = fun io:format("~p\n")/1
    F(Str)

b () =
    begin
        do()
        some()
        stuff
    end

p&to_list (Arg) =
    case Arg of
        T | is_tuple(T) ->  [p(X) X | X <~ T]
        L | is_list(L) ->   [p(X) X | X <- L]
        B | is_binary(B) -> [p(X) X | X <= B]
    end

map (F, A) | is_tuple(A) = {F(X) | X <~ A}

try…catch () =
    try bla() Expression of
        SuccessfulPattern1 ->
            Expression1
        SuccessfulPattern2 ->
            Expression2
    catch
        TypeOfError:ExceptionPattern1 ->
            Expression3
        TypeOfError:ExceptionPattern2 ->
            Expression4
    end

'π' () = 3.1415926535

brilliant! () =  << case X of Z | m(Z) -> 0 Y -> 1 end | X <~ _>>

i-am-impressed () =
    work()
    try
        talk()
        _Knight = "None shall Pass!"
        _Doubles = [2*N | N <- [1..100]]
        throw(up)
        _WillReturnThis = tequila
    catch
        Exception:Reason -> {caught, Exception, Reason}
    end

export a/0 b/1 c/234 end

f()= {2..3} [-6..18] [g()-2..Max]

f()= [1|[2|[3|[]]]]

f()= fun (Thu) -> gaim end

many_args (A, [H|T], "str", -2) = ok

fun_clauses () =
    fun (123) -> "123"
        (231) -> deux-trois-un
        (stop) ->
            bla(1, 2, B, [$*])
            babebibobu()
            case do() of
                hammer -> lel() so_funny
                _ -> something
            end
    end

#%f() = case asd of a -> a s -> smth (d) -> ah-ah! end

len :: (list()) -> pos_integer() | 0
len (L) | is_list(L)  = length(L)

len :: (<list>) -> <pos_integer>
len (L) = length(L)
#% len :: (‹tuple›) -> ‹pos_integer›
len (T) when is_tuple(T) = size(T)

'!' (0) = 1
'!' :: (N) -> M when N::<pos_integer> M::<pos_integer>
'!' (N) = N * :(N - 1)

'!' :: () -> fun((N) -> N) when N::pos_integer()
'!' () =
    fun (0) -> 1
        (N) when N > 0 ->
            N * :(N - 1) #% ‘:’ works on funs.
    end

flat.map (Fun, List) =
    fun append/1 . fun map/2 (Fun, List)

flatmap /2 =
    fun append/1 . fun map/2

f /1 =
    fun (0) -> 1
        (N) -> N * :(N - 1)
    end

f()=
    [  a() :loop()
    , (a()):loop() ]

f()= A = B = c

zip :: ([<term>], [<term>]) -> [{<term>,<term>}]
zip ([X|Xs], [Y|Ys]) =
    [{X',Y'} | X' <- [X|Xs]
             | Y' <- [Y|Ys]]
zip ([], []) = []

fizz_buzz (N) =
    [case {X rem 3, X rem 5} of
        {0, 0} -> fizzbuzz
        {0, _} -> fizz
        {_, 0} -> buzz
        {_, _} -> X
     end | X <- [1..N]]

f()= string:sub_string(OptStr, P, P + 2) >= "3.4"
