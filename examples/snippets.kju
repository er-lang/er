exemples


len (L) | is_list(L)  = length(L).
len (T) | is_tuple(T) = size(T).

length ([])             = 0.
length (L) | is_list(L) = 1 + :(L).

f () =
    case orddict:find(Node, Nodes) of
        {ok, Ref} -> {down, node, Ref}
        {ok, WrongRef} | is_reference(WrongRef) -> 'not the one'
        error ->     {ignore, not_monitored, FD}
    .
.

'f' () =
    receive
#       {'ok', Ref} -> 'do_somth'('arg1', 2) {'down', 'node', Ref}
        {'ok', WrongRef} when 'is_reference'(WrongRef) -> 'smth'() 'not the one'
        'error' ->     {'ignore', 'not_monitored', FD}
    end.

t () =
    try Expr
    catch
        throw:Term -> Term
        exit:Reason -> {'EXIT',Reason}
        error:Reason -> {'EXIT',{Reason,erlang:get_stacktrace()}}
    end.

i (Arg1) =
    if not Arg1 then false else false end.

len (A) =
    case A of
        L when is_list(L) ->
            length(L)
        T | is_tuple(T) ->
            size(T)
    end.

p (Str) =
    F = fun io:format("~p\n")/1
    F(Str)
end

len :: (‹term›) -> ‹pos_integer›
len (L) | is_list(L)  = length(L).
len (T) | is_tuple(T) = size(T).
