exemples


len (L) | is_list(L)  = length(L).
len (T) | is_tuple(T) = size(T).

length ([])             = 0.
length (L) | is_list(L) = 1 + :(L).

f () =
    case orddict:find(Node, Nodes) of
        {ok, Ref} -> {down, node, Ref}
        {ok, WrongRef} | is_reference(WrongRef) -> 'not the one'
        error ->     {ignore, not_monitored, FD}
    .
.

'f' () =
    receive
#       {'ok', Ref} -> 'do_somth'('arg1', 2) {'down', 'node', Ref}
        {'ok', WrongRef} when 'is_reference'(WrongRef) -> 'smth'() 'not the one'
        'error' ->     {'ignore', 'not_monitored', FD}
    end.

t () =
    try Expr
    catch
        throw:Term -> Term
        exit:Reason -> {'EXIT',Reason}
        error:Reason -> {'EXIT',{Reason,erlang:get_stacktrace()}}
    end.

i (Arg1) =
    if not Arg1 then false else false end.

len (A) =
    case A of
        L when is_list(L) ->
            length(L)
        T | is_tuple(T) ->
            size(T)
    end.

p (Str) =
    F = fun io:format("~p\n")/1
    F(Str)
end

b () =
    begin
        do()
        some()
        stuff
    end.

p&to_list (Arg) =
    case Arg of
        T | is_tuple(T) ->  [p(X) X | X <~ T]
        L | is_list(L) ->   [p(X) X | X <- L]
        B | is_binary(B) -> [p(X) X | X <= B]
    end.

map (F, A) | is_tuple(A) = {F(X) | X <~ A}.

try…catch () =
    try bla() Expression of
        SuccessfulPattern1 ->
            Expression1
        SuccessfulPattern2 ->
            Expression2
    catch
        TypeOfError:ExceptionPattern1 ->
            Expression3
        TypeOfError:ExceptionPattern2 ->
            Expression4
    end.

brilliant! () =  << case X of Z | m(Z) -> 0 Y -> 1 end | X <~ _>>.

im_impressed () =
    try
        talk()
        _Knight = "None shall Pass!"
        _Doubles = [2*N || N <- lists:seq(1,100)]
        throw(up)
        _WillReturnThis = tequila
    catch
        Exception:Reason -> {caught, Exception, Reason}
    end.

export a/0 b/1 c/234 end

f()= {2..3} [g()-2..Max].

len :: (‹term›) -> ‹pos_integer›
len (L) | is_list(L)  = length(L).
len (T) | is_tuple(T) = size(T).
