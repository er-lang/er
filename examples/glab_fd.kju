###-------------------------------------------------------------------
## @copyright Geoff Cant
## @author Geoff Cant <nem@erlang.geek.nz>
## @doc Implements (slightly?) unreliable failure detectors for the
##      async bully algorithm used in gl_async_bully.
## @end
###-------------------------------------------------------------------
visible
            new/1
          start/2
           stop/2
    filter_DOWN/2
            set/2
end

record fd of
    name  :: ‹atom›
    nodes :: ‹orddict:orddict› = orddict:new()
end

opaque ‹fd_set› :: fd{}.

visible ‹fd_set› 0.

##====================================================================
## API
##====================================================================

new :: (‹atom›) -> ‹fd_set›
new (Name) =
    fd{name = Name}.

start :: (‹node›, ‹fd_set›) -> ‹fd_set›
start (Node, FD = fd{name = Name, nodes = Nodes}) =
    if orddict:is_key(Node, Nodes)
    then FD
    else
        Ref = erlang:monitor(process, {Name, Node})
        fd::FD{nodes = orddict:store(Node, Ref, Nodes)}
    end
end

filter_DOWN :: ({'DOWN', ‹reference›, _, _, Info}, ‹fd_set›)
    -> {'down', {‹atom›, ‹node›, Info}, ‹fd_set›}
     | {'ignore', ‹atom Reason›, ‹fd_set›}
filter_DOWN ({'DOWN', Ref, process, {Name, Node}, Info},
             FD = fd{name = Name, nodes = Nodes}) =
    case orddict:find(Node, Nodes)
    | {ok, Ref} ->
        {down
        , {Name, Node, Info}
        , fd::FD{nodes = orddict:erase(Node, Nodes)}}
    | {ok, WrongRef} when ‹reference WrongRef› ->
        {ignore, stale, FD}
    | error ->
        {ignore, not_monitored, FD}
    end.
filter_DOWN ({'DOWN', _Ref, Type, _Obj, _Info}, FD) =
    {ignore, other_monitor, FD}
end

stop :: (‹node›, ‹fd_set›) -> ‹fd_set›
stop (Node, FD = fd{nodes = Nodes}) =
    case orddict:find(Node, Nodes) of
    {ok, Ref} ->
        erlang:demonitor(Ref, [flush])
        fd::FD{nodes = orddict:erase(Node, Nodes)}
    error ->
        FD
    .
.

set :: ([‹node›], ‹fd_set›) -> ‹fd_set›
set (NewNodes, FD = fd{nodes = Nodes}) =
    lists:foldl(fun :start/2,
                lists:foldl(fun :stop/2, FD,
                            orddict:fetch_keys(Nodes)),
                NewNodes).

##====================================================================
## Internal functions
##====================================================================
