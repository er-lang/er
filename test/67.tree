(root (block (attribute (atom module) (term (atom some_attributes)))) (block (attribute (atom behaviour) (term (atom gen_server)))) (block (attribute (atom export) (fas (fa (atom start_link) / (integer 0))))) (block (attribute (atom export) (fas (fa (atom init) / (integer 1)) (fa (atom handle_call) / (integer 3)) (fa (atom handle_cast) / (integer 2)) (fa (atom handle_info) / (integer 2)) (fa (atom terminate) / (integer 2)) (fa (atom code_change) / (integer 3))))) (block (attribute (atom record) (term (atom state)) of (term (tuple { })))) (block (def (func (atom start_link) (args ( )) (lra ->) (seqExprs (expr (functionCall (exprMax (term (atom gen_server))) : (exprMax (term (atom start_link))) (params ( (exprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom local)))) , (expr (exprMax (term (atom '?MODULE'))))) })))) , (expr (exprMax (term (atom '?MODULE')))) , (expr (exprMax (term (list [ ])))) , (expr (exprMax (term (list [ ]))))) )))))))) (block (def (func (atom init) (args ( (matchables (matchable (term (list [ ])))) )) (lra ->) (seqExprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom ok)))) , (expr (exprMax (record (recEmpty #{ (atom state) }))))) })))))))) (block (def (func (atom handle_call) (args ( (matchables (matchable (var _Request)) , (matchable (var _From)) , (matchable (var State))) )) (lra ->) (seqExprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom reply)))) , (expr (exprMax (term (atom ignored)))) , (expr (exprMax (var State)))) })))))))) (block (def (func (atom handle_cast) (args ( (matchables (matchable (var _Msg)) , (matchable (var State))) )) (lra ->) (seqExprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom noreply)))) , (expr (exprMax (var State)))) })))))))) (block (def (func (atom handle_info) (args ( (matchables (matchable (var _Info)) , (matchable (var State))) )) (lra ->) (seqExprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom noreply)))) , (expr (exprMax (var State)))) })))))))) (block (def (func (atom terminate) (args ( (matchables (matchable (var _Reason)) , (matchable (var _State))) )) (lra ->) (seqExprs (expr (exprMax (term (atom ok)))))))) (block (def (func (atom code_change) (args ( (matchables (matchable (var _OldVsn)) , (matchable (var State)) , (matchable (var _Extra))) )) (lra ->) (seqExprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom ok)))) , (expr (exprMax (var State)))) })))))))) <EOF>)
