(root (block (def (fun_func (fa (atom factorial) / (integer 1)) (lra ->) (seqExprs (expr (fun (fun_ fun) (funClause (args ( (matchables (matchable (term (atom f)))) )) (lra ->) (seqExprs (expr (fun (fun_ fun) : / (integer 1))))) (funClause (args ( (matchables (matchable (term (atom ff)))) )) (lra ->) (seqExprs (expr (fun (fun_ fun) : (args ( )) / (integer 1))))) (funClause (args ( (matchables (matchable (term (integer 0)))) )) (lra ->) (seqExprs (expr (exprMax (term (integer 1)))))) (funClause (args ( (matchables (matchable (var N))) )) (guard when (expr (expr (exprMax (var N))) (compOp >) (expr (exprMax (term (integer 0)))))) (lra ->) (seqExprs (expr (expr (exprMax (var N))) (mulOp *) (expr (functionCall : (params ( (exprs (expr (expr (exprMax (var N))) (addOp -) (expr (exprMax (term (integer 1)))))) ))))))) (funClause (args ( (matchables (matchable (term (atom f24)))) )) (lra ->) (seqExprs (expr (fun (fun_ fun) : (args ( (matchables (matchable (term (integer 4)))) )) / (integer 0))))) (funClause (args ( (matchables (matchable (var ___))) )) (lra ->) (seqExprs (expr (functionCall : (params ( (exprs (expr (exprMax (term (integer 4))))) )))))) end)))))) <EOF>)
