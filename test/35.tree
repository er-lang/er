(root (block (def (func (atom fizz_buzz) (args ( (matchables (matchable (var N))) )) (lra ->) (seqExprs (expr (lc [ (seqExprs (expr (case_ case (expr (exprMax (term (tuple { (exprs (expr (expr (exprMax (var X))) (mulOp rem) (expr (exprMax (term (integer 3))))) , (expr (expr (exprMax (var X))) (mulOp rem) (expr (exprMax (term (integer 5)))))) })))) (of of (clauses (clause (matchable (term (tuple { (exprs (expr (exprMax (term (integer 0)))) , (expr (exprMax (term (integer 0))))) }))) (lra ->) (seqExprs (expr (exprMax (term (atom fizzbuzz)))))) (clause (matchable (term (tuple { (exprs (expr (exprMax (term (integer 0)))) , (expr (exprMax (var _)))) }))) (lra ->) (seqExprs (expr (exprMax (term (atom fizz)))))) (clause (matchable (term (tuple { (exprs (expr (exprMax (var _))) , (expr (exprMax (term (integer 0))))) }))) (lra ->) (seqExprs (expr (exprMax (term (atom buzz)))))) (clause (matchable (term (tuple { (exprs (expr (exprMax (var _))) , (expr (exprMax (var _)))) }))) (lra ->) (seqExprs (expr (exprMax (var X))))))) end))) (gens (gen_ | (gen (matchable (var X)) (generator <-) (expr (lr [ (expr (exprMax (term (integer 1)))) .. (expr (exprMax (var N))) ]))))) ])))))) <EOF>)
