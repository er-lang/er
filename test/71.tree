(root (block (def (func (atom fcall_and_funs) (args ( (matchables (matchable (var F)) , (matchable (var B)) , (matchable (matchable (var N)) = (matchable (term (integer 0))))) )) (lra ->) (seqExprs (expr (functionCall (exprMax (term (atom a))) : (exprMax (var B)) (params ( (exprs (expr (exprMax (term (atom c))))) )))) (expr (exprMax ( (expr (exprMax (term (atom d)))) ))) (expr (matchable (var _FCall)) = (expr (functionCall ( (exprMax (var F)) (params ( )) )))) (expr (matchable (var _FunFCall)) = (expr (functionCall ( (exprMax ( (expr (fun (fun_ fun) (exprMax (term (atom a))) / (integer 0))) )) (params ( )) )))) (expr (matchable (var _Fun)) = (expr (fun (fun_ fun) (exprMax (term (atom a))) : (exprMax (var B)) (args ( (matchables (matchable (term (atom c)))) )) / (var N)))) (expr (exprMax (var A))) (expr (exprMax (var B))) (expr (expr (exprMax ( (expr (expr (exprMax (term (integer 1)))) (addOp +) (expr (exprMax (term (integer 2))))) ))) (mulOp *) (expr (exprMax ( (expr (expr (exprMax (term (integer 2)))) (addOp +) (expr (exprMax (term (integer 3))))) )))) (expr (exprMax (var A))) (expr (expr (functionCall ( (exprMax (var B)) (params ( (exprs (expr (expr (exprMax (term (integer 1)))) (addOp +) (expr (exprMax (term (integer 2)))))) )) ))) (mulOp *) (expr (exprMax ( (expr (expr (exprMax (term (integer 2)))) (addOp +) (expr (exprMax (term (integer 3))))) )))))))) <EOF>)
