(root (block (def (spec (atom fmap_equivalent) (dim ::) (tyFun ( (tyMaxs (tyMax (type (tyRecord #{ (atom session_context) })))) ) (lra ->) (tyMax (type (subtype (atom '') : (atom return) ( (tyMaxs (tyMax (type (tyRecord #{ (atom session_context) })))) )))))) (func (atom fmap_equivalent) (args ( (matchables (matchable (var Context))) )) (lra ->) (seqExprs (expr (case_ case (expr (piped (exprMax (var Context)) (pipeOp |>) (fun (fun_ fun) (exprMax (term (atom maybe_resource_exists))) / (integer 1)) (pipeOp -<) (fun (fun_ fun) (exprMax (term (atom maybe_validates))) / (integer 1)) (pipeOp -<) (fun (fun_ fun) (exprMax (term (atom maybe_load_something))) / (integer 1)) (pipeOp -<) (fun (fun_ fun) (exprMax (term (atom maybe_save_result))) / (integer 1)))) (of of (clauses (clause (matchable (term (tuple { (exprs (expr (exprMax (term (atom ok)))) , (expr (exprMax (var Context')))) }))) (lra ->) (seqExprs (expr (exprMax (var Context'))))) (clause (matchable (matchable (term (tuple { (exprs (expr (exprMax (term (atom error)))) , (expr (exprMax (var Reason)))) }))) = (matchable (var _E))) (lra ->) (seqExprs (expr (functionCall (exprMax (term (atom lager))) : (exprMax (term (atom error))) (params ( (exprs (expr (exprMax (term (string "handling ~s failed: ~p")))) , (expr (exprMax (term (list [ (expr (exprMax (record (recRead #{ (expr (exprMax (var Context))) (atom session_context) (atom request_id) })))) (tail , (expr (exprMax (var _E))) (tail ]))))))) )))) (expr (functionCall (exprMax (term (atom session))) : (exprMax (term (atom reply_failure))) (params ( (exprs (expr (exprMax (var Reason))) , (expr (exprMax (var Context)))) )))))))) end)))))) <EOF>)
