(root (block (def (func (atom tryâ€¦catch) (args ( )) (lra ->) (seqExprs (expr (try_ try (seqExprs (expr (functionCall (atom bla) (params ( )))) (expr (exprMax (var Expression)))) (of of (clauses (clause (matchable (var SuccessfulPattern1)) (lra ->) (seqExprs (expr (exprMax (var Expression1))))) (clause (matchable (var SuccessfulPattern2)) (lra ->) (seqExprs (expr (exprMax (var Expression2))))))) catch (catchClauses (catchClause (exprMax (var TypeOfError)) : (clause (matchable (var ExceptionPattern1)) (lra ->) (seqExprs (expr (exprMax (var Expression3)))))) (catchClause (exprMax (var TypeOfError)) : (clause (matchable (var ExceptionPattern2)) (lra ->) (seqExprs (expr (exprMax (var Expression4))))))) end)))))) <EOF>)
