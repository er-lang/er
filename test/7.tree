(root (block (def (func (atom t) (args ( )) (lra ->) (seqExprs (expr (try_ try (seqExprs (expr (exprMax (var Expr)))) catch (catchClauses (catchClause (exprMax (term (atom throw))) : (clause (matchable (var Term)) (lra ->) (seqExprs (expr (exprMax (var Term)))))) (catchClause (exprMax (term (atom exit))) : (clause (matchable (var Reason)) (lra ->) (seqExprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom 'EXIT')))) , (expr (exprMax (var Reason)))) }))))))) (catchClause (exprMax (term (atom error))) : (clause (matchable (var Reason)) (lra ->) (seqExprs (expr (exprMax (term (tuple { (exprs (expr (exprMax (term (atom 'EXIT')))) , (expr (exprMax (term (tuple { (exprs (expr (exprMax (var Reason))) , (expr (functionCall (exprMax (term (atom erlang))) : (exprMax (term (atom get_stacktrace))) (params ( ))))) }))))) })))))))) end)))))) <EOF>)
